scalar Time

type User {
  id: ID!
  displayName: String
  username: String!
}

type Post {
  id: ID!
  user: User!
  title: String!
  description: String!
  comment: [Comment]!
  hashtag: String!
}

type Comment {
  id: ID!
  comment: String!
  post: Post!
  replyOn: Comment
  user: User
}

input RegisterInput {
  username: String!
  password: String!
  confirmPassword: String!
}

input CreatePostInput {
  title: String!
  description: String!
  hashtag: String!
}

type AuthToken {
  accessToken: String!
  expiredAt: Time!
}

type AuthResponse {
  authToken: AuthToken!
  user: User!
}

input UserQueryInput {
  ID: ID
  username: String
}

input LoginInput {
  username: String!
  password: String!
}

input CreateCommentInput {
  comment: String!
  postId: ID!
  replyToComment: ID
}

input PostFilterInput {
  limit: Int!
  offset: Int!
}

type PostResponse {
  totalPost: Int
  post: [Post]!
}

type Query {
  user(input: UserQueryInput!): User!
  post: [Post]!
  getAllPostsByFilter(input: PostFilterInput): PostResponse!
}

type Mutation {
  register(input: RegisterInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  createPost(input: CreatePostInput): Post!
  createComment(input: CreateCommentInput): Comment!
}
